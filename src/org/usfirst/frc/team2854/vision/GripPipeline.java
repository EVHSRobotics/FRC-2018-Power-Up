package org.usfirst.frc.team2854.vision;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.HashMap;

import edu.wpi.first.wpilibj.vision.VisionPipeline;

import org.opencv.core.*;
import org.opencv.core.Core.*;
import org.opencv.features2d.FeatureDetector;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.*;
import org.opencv.objdetect.*;

/**
 * GripPipeline class.
 *
 * <p>
 * An OpenCV pipeline generated by GRIP.
 *
 * @author GRIP
 */
public class GripPipeline implements VisionPipeline {

	// Outputs
	private Mat blur0Output = new Mat();
	private Mat hslThresholdOutput = new Mat();
	private Mat maskOutput = new Mat();
	private Mat cvCvtcolorOutput = new Mat();
	private Mat cvExtractchannelOutput = new Mat();
	private Mat blur1Output = new Mat();
	private Mat cvThresholdOutput = new Mat();
	private Mat cvErodeOutput = new Mat();
	private ArrayList<MatOfPoint> findContoursOutput = new ArrayList<MatOfPoint>();

	static {
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
	}

	/**
	 * This is the primary method that runs the entire pipeline and updates the
	 * outputs.
	 */
	@Override
	public void process(Mat source0) {
		// Step Blur0:
		Mat blur0Input = source0;
		BlurType blur0Type = BlurType.get("Box Blur");
		double blur0Radius = 5.405405405405405;
		blur(blur0Input, blur0Type, blur0Radius, blur0Output);
		// Step HSL_Threshold0:
		Mat hslThresholdInput = blur0Output;
		double[] hslThresholdHue = { 17.805755395683455, 43.636363636363626 };
		double[] hslThresholdSaturation = { 50.44964028776978, 255.0 };
		double[] hslThresholdLuminance = { 0.0, 255.0 };
		hslThreshold(hslThresholdInput, hslThresholdHue, hslThresholdSaturation, hslThresholdLuminance,
				hslThresholdOutput);

		// Step Mask0:
		Mat maskInput = source0;
		Mat maskMask = hslThresholdOutput;
		mask(maskInput, maskMask, maskOutput);

		// Step CV_cvtColor0:
		Mat cvCvtcolorSrc = maskOutput;
		int cvCvtcolorCode = Imgproc.COLOR_BGR2HSV;
		cvCvtcolor(cvCvtcolorSrc, cvCvtcolorCode, cvCvtcolorOutput);

		// Step CV_extractChannel0:
		Mat cvExtractchannelSrc = cvCvtcolorOutput;
		double cvExtractchannelChannel = 1.0;
		cvExtractchannel(cvExtractchannelSrc, cvExtractchannelChannel, cvExtractchannelOutput);

		// Step Blur1:
		Mat blur1Input = cvExtractchannelOutput;
		BlurType blur1Type = BlurType.get("Median Filter");
		double blur1Radius = 11.711711711711711;
		blur(blur1Input, blur1Type, blur1Radius, blur1Output);

		// Step CV_Threshold0:
		Mat cvThresholdSrc = blur1Output;
		double cvThresholdThresh = 50.0;
		double cvThresholdMaxval = 255.0;
		int cvThresholdType = Imgproc.THRESH_BINARY;
		cvThreshold(cvThresholdSrc, cvThresholdThresh, cvThresholdMaxval, cvThresholdType, cvThresholdOutput);

		// Step CV_erode0:
		Mat cvErodeSrc = cvThresholdOutput;
		Mat cvErodeKernel = new Mat();
		Point cvErodeAnchor = new Point(-1, -1);
		double cvErodeIterations = 15.0;
		int cvErodeBordertype = Core.BORDER_CONSTANT;
		Scalar cvErodeBordervalue = new Scalar(-1);
		cvErode(cvErodeSrc, cvErodeKernel, cvErodeAnchor, cvErodeIterations, cvErodeBordertype, cvErodeBordervalue,
				cvErodeOutput);

		// Step Find_Contours0:
		Mat findContoursInput = cvErodeOutput;
		boolean findContoursExternalOnly = false;
		findContours(findContoursInput, findContoursExternalOnly, findContoursOutput);

		blur0Input.release();
		maskInput.release();
		maskMask.release();
		cvCvtcolorSrc.release();
		cvExtractchannelSrc.release();
		blur1Input.release();
		cvThresholdSrc.release();
		cvErodeSrc.release();
		cvErodeKernel.release();
		findContoursInput.release();

		System.gc();

	}

	/**
	 * This method is a generated getter for the output of a Blur.
	 * 
	 * @return Mat output from Blur.
	 */
	public Mat blur0Output() {
		return blur0Output;
	}

	/**
	 * This method is a generated getter for the output of a HSL_Threshold.
	 * 
	 * @return Mat output from HSL_Threshold.
	 */
	public Mat hslThresholdOutput() {
		return hslThresholdOutput;
	}

	/**
	 * This method is a generated getter for the output of a Mask.
	 * 
	 * @return Mat output from Mask.
	 */
	public Mat maskOutput() {
		return maskOutput;
	}

	/**
	 * This method is a generated getter for the output of a CV_cvtColor.
	 * 
	 * @return Mat output from CV_cvtColor.
	 */
	public Mat cvCvtcolorOutput() {
		return cvCvtcolorOutput;
	}

	/**
	 * This method is a generated getter for the output of a CV_extractChannel.
	 * 
	 * @return Mat output from CV_extractChannel.
	 */
	public Mat cvExtractchannelOutput() {
		return cvExtractchannelOutput;
	}

	/**
	 * This method is a generated getter for the output of a Blur.
	 * 
	 * @return Mat output from Blur.
	 */
	public Mat blur1Output() {
		return blur1Output;
	}

	/**
	 * This method is a generated getter for the output of a CV_Threshold.
	 * 
	 * @return Mat output from CV_Threshold.
	 */
	public Mat cvThresholdOutput() {
		return cvThresholdOutput;
	}

	/**
	 * This method is a generated getter for the output of a CV_erode.
	 * 
	 * @return Mat output from CV_erode.
	 */
	public Mat cvErodeOutput() {
		return cvErodeOutput;
	}

	/**
	 * This method is a generated getter for the output of a Find_Contours.
	 * 
	 * @return ArrayList<MatOfPoint> output from Find_Contours.
	 */
	public ArrayList<MatOfPoint> findContoursOutput() {
		return findContoursOutput;
	}

	/**
	 * Segment an image based on hue, saturation, and luminance ranges.
	 *
	 * @param input
	 *            The image on which to perform the HSL threshold.
	 * @param hue
	 *            The min and max hue
	 * @param sat
	 *            The min and max saturation
	 * @param lum
	 *            The min and max luminance
	 * @param output
	 *            The image in which to store the output.
	 */
	private void hslThreshold(Mat input, double[] hue, double[] sat, double[] lum, Mat out) {
		Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2HLS);
		Core.inRange(out, new Scalar(hue[0], lum[0], sat[0]), new Scalar(hue[1], lum[1], sat[1]), out);
	}

	/**
	 * Filter out an area of an image using a binary mask.
	 * 
	 * @param input
	 *            The image on which the mask filters.
	 * @param mask
	 *            The binary image that is used to filter.
	 * @param output
	 *            The image in which to store the output.
	 */
	private void mask(Mat input, Mat mask, Mat output) {
		mask.convertTo(mask, CvType.CV_8UC1);
		Core.bitwise_xor(output, output, output);
		input.copyTo(output, mask);
	}

	/**
	 * Converts an image from one color space to another.
	 * 
	 * @param src
	 *            Image to convert.
	 * @param code
	 *            conversion code.
	 * @param dst
	 *            converted Image.
	 */
	private void cvCvtcolor(Mat src, int code, Mat dst) {
		Imgproc.cvtColor(src, dst, code);
	}

	/**
	 * Extracts given channel from an image.
	 * 
	 * @param src
	 *            the image to extract.
	 * @param channel
	 *            zero indexed channel number to extract.
	 * @param dst
	 *            output image.
	 */
	private void cvExtractchannel(Mat src, double channel, Mat dst) {
		Core.extractChannel(src, dst, (int) channel);
	}

	/**
	 * An indication of which type of filter to use for a blur. Choices are BOX,
	 * GAUSSIAN, MEDIAN, and BILATERAL
	 */
	enum BlurType {
		BOX("Box Blur"), GAUSSIAN("Gaussian Blur"), MEDIAN("Median Filter"), BILATERAL("Bilateral Filter");

		private final String label;

		BlurType(String label) {
			this.label = label;
		}

		public static BlurType get(String type) {
			if (BILATERAL.label.equals(type)) {
				return BILATERAL;
			} else if (GAUSSIAN.label.equals(type)) {
				return GAUSSIAN;
			} else if (MEDIAN.label.equals(type)) {
				return MEDIAN;
			} else {
				return BOX;
			}
		}

		@Override
		public String toString() {
			return this.label;
		}
	}

	/**
	 * Softens an image using one of several filters.
	 * 
	 * @param input
	 *            The image on which to perform the blur.
	 * @param type
	 *            The blurType to perform.
	 * @param doubleRadius
	 *            The radius for the blur.
	 * @param output
	 *            The image in which to store the output.
	 */
	private void blur(Mat input, BlurType type, double doubleRadius, Mat output) {
		int radius = (int) (doubleRadius + 0.5);
		int kernelSize;
		switch (type) {
		case BOX:
			kernelSize = 2 * radius + 1;
			Imgproc.blur(input, output, new Size(kernelSize, kernelSize));
			break;
		case GAUSSIAN:
			kernelSize = 6 * radius + 1;
			Imgproc.GaussianBlur(input, output, new Size(kernelSize, kernelSize), radius);
			break;
		case MEDIAN:
			kernelSize = 2 * radius + 1;
			Imgproc.medianBlur(input, output, kernelSize);
			break;
		case BILATERAL:
			Imgproc.bilateralFilter(input, output, -1, radius, radius);
			break;
		}
	}

	/**
	 * Apply a fixed-level threshold to each array element in an image.
	 * 
	 * @param src
	 *            Image to threshold.
	 * @param threshold
	 *            threshold value.
	 * @param maxVal
	 *            Maximum value for THRES_BINARY and THRES_BINARY_INV
	 * @param type
	 *            Type of threshold to appy.
	 * @param dst
	 *            output Image.
	 */
	private void cvThreshold(Mat src, double threshold, double maxVal, int type, Mat dst) {
		Imgproc.threshold(src, dst, threshold, maxVal, type);
	}

	/**
	 * Expands area of lower value in an image.
	 * 
	 * @param src
	 *            the Image to erode.
	 * @param kernel
	 *            the kernel for erosion.
	 * @param anchor
	 *            the center of the kernel.
	 * @param iterations
	 *            the number of times to perform the erosion.
	 * @param borderType
	 *            pixel extrapolation method.
	 * @param borderValue
	 *            value to be used for a constant border.
	 * @param dst
	 *            Output Image.
	 */
	private void cvErode(Mat src, Mat kernel, Point anchor, double iterations, int borderType, Scalar borderValue,
			Mat dst) {
		if (kernel == null) {
			kernel = new Mat();
		}
		if (anchor == null) {
			anchor = new Point(-1, -1);
		}
		if (borderValue == null) {
			borderValue = new Scalar(-1);
		}
		Imgproc.erode(src, dst, kernel, anchor, (int) iterations, borderType, borderValue);
	}

	/**
	 * Sets the values of pixels in a binary image to their distance to the nearest
	 * black pixel.
	 * 
	 * @param input
	 *            The image on which to perform the Distance Transform.
	 * @param type
	 *            The Transform.
	 * @param maskSize
	 *            the size of the mask.
	 * @param output
	 *            The image in which to store the output.
	 */
	private void findContours(Mat input, boolean externalOnly, List<MatOfPoint> contours) {
		Mat hierarchy = new Mat();
		contours.clear();
		int mode;
		if (externalOnly) {
			mode = Imgproc.RETR_EXTERNAL;
		} else {
			mode = Imgproc.RETR_LIST;
		}
		int method = Imgproc.CHAIN_APPROX_SIMPLE;
		Imgproc.findContours(input, contours, hierarchy, mode, method);
	}

}
